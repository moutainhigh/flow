/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * TaskFlowRedoDialog.java
 *
 * Created on 2010-2-5, 13:34:41
 */

package com.aspire.etl.flowmonitor.dialog;

import com.aspire.etl.flowdefine.StepType;
import com.aspire.etl.flowdefine.Taskflow;
import com.aspire.etl.flowmonitor.Xmlrpc;

import java.util.Calendar;
import java.util.GregorianCalendar;

import javax.swing.JOptionPane;


import com.aspire.etl.tool.TimeUtils;

/**
 *
 * @author x_jiangts
 */
public class TaskFlowRedoDialog extends javax.swing.JDialog {

	static org.apache.log4j.Logger log;
	private Taskflow taskflow;
	// 周期类型
	private StepType stepType;
	private boolean isConfirm = false;
	
	private String sceneStartTime;
	
	private String statTime;

	public boolean getIsConfirm() {
		return isConfirm;
	}

	public void setIsConfirm(boolean isConfirm) {
		this.isConfirm = isConfirm;
	}
        
    /** Creates new form TaskFlowRedoDialog */
    public TaskFlowRedoDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        log = org.apache.log4j.Logger.getLogger("FlowMonitor");
        initComponents();
    }

	public void loadValue(Taskflow taskflow) throws Exception {
		this.taskflow = taskflow;
		
		this.taskflowName.setText(taskflow.getTaskflow() + "(" + taskflow.getDescription() +")");
		// 周期类型
		this.stepType = Xmlrpc.getInstance().queryStepType(this.taskflow.getStepType());
		
		//重做开始时间
		this.redoStartTimeTF.setText(TimeUtils.toChar(this.taskflow.getRedoStartTime()));
		
		// 重做结束时间
		this.redoEndTimeTF.setText(TimeUtils.toChar(this.taskflow.getRedoEndTime()));
		
		// 场景时间
		sceneStartTime = TimeUtils.toChar(this.taskflow.getSceneStatTime());
		
		//当前流程进度时间
		statTime = TimeUtils.toChar(this.taskflow.getStatTime());
		this.statTimeTF.setText(statTime);
	}
   

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        redoStartTimeL = new javax.swing.JLabel();
        redoStartTimeTF = new javax.swing.JTextField();
        redoEndTimeL = new javax.swing.JLabel();
        redoEndTimeTF = new javax.swing.JTextField();
        taskflowName = new javax.swing.JTextField();
        redoStartTimeL1 = new javax.swing.JLabel();
        jBtnOK = new javax.swing.JButton();
        jBtnClose = new javax.swing.JButton();
        jBtnCancel = new javax.swing.JButton();
        statTimeTF = new javax.swing.JTextField();
        redoStartTimeL2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("流程重做对话框");

        redoStartTimeL.setText("重做开始时间：");

        redoStartTimeTF.setBackground(new java.awt.Color(249, 247, 247));
        redoStartTimeTF.setEditable(false);
        redoStartTimeTF.setToolTipText("重做开始时间,输入时请使用半角输入时间,格式必须为 yyyy-MM-dd HH:mm:ss");
        redoStartTimeTF.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                redoStartTimeTFMouseClicked(evt);
            }
        });
        redoStartTimeTF.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                redoStartTimeTFCaretUpdate(evt);
            }
        });

        redoEndTimeL.setText("重做结束时间：");

        redoEndTimeTF.setBackground(new java.awt.Color(249, 247, 247));
        redoEndTimeTF.setEditable(false);
        redoEndTimeTF.setToolTipText("重做结束时间,输入时请使用半角输入时间,格式必须为 yyyy-MM-dd HH:mm:ss");
        redoEndTimeTF.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                redoEndTimeTFMouseClicked(evt);
            }
        });

        taskflowName.setEditable(false);
        taskflowName.setToolTipText("线程数，只可以输入数字");

        redoStartTimeL1.setText("流程名称：");

        jBtnOK.setText("确认");
        jBtnOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnOKActionPerformed(evt);
            }
        });

        jBtnClose.setText("关闭");
        jBtnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnCloseActionPerformed(evt);
            }
        });

        jBtnCancel.setText("取消");
        jBtnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnCancelActionPerformed(evt);
            }
        });

        statTimeTF.setEditable(false);
        statTimeTF.setToolTipText("线程数，只可以输入数字");

        redoStartTimeL2.setText("当前" + TaskflowDialog.statTimeTitle + "：");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(35, 35, 35)
                                .add(redoStartTimeL1))
                            .add(layout.createSequentialGroup()
                                .addContainerGap()
                                .add(redoStartTimeL2)))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(taskflowName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 359, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(statTimeTF, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 359, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(redoStartTimeL)
                            .add(redoEndTimeL))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(redoEndTimeTF, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 360, Short.MAX_VALUE)
                            .add(redoStartTimeTF, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 360, Short.MAX_VALUE))))
                .add(23, 23, 23))
            .add(layout.createSequentialGroup()
                .add(110, 110, 110)
                .add(jBtnOK)
                .add(26, 26, 26)
                .add(jBtnCancel)
                .add(30, 30, 30)
                .add(jBtnClose)
                .addContainerGap(144, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(redoStartTimeL1)
                    .add(taskflowName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(11, 11, 11)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(redoStartTimeL2)
                    .add(statTimeTF, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(redoStartTimeL)
                    .add(redoStartTimeTF, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(redoEndTimeTF, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(redoEndTimeL))
                .add(29, 29, 29)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jBtnCancel)
                    .add(jBtnClose)
                    .add(jBtnOK))
                .add(19, 19, 19))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void redoStartTimeTFMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_redoStartTimeTFMouseClicked
       GregorianCalendar gregorianCalendar = new GregorianCalendar();
			if (!this.redoStartTimeTF.getText().equals("")) {
				gregorianCalendar.setTime(TimeUtils.toDate(this.redoStartTimeTF
						.getText()));
			} else {
				gregorianCalendar = null;
			}
			Calendar c = JDateChooser.showDialog(null, "请选择日期",
					gregorianCalendar, this.stepType);
			if (c != null) {
				this.redoStartTimeTF.setText(TimeUtils.toChar(c.getTime()));
			}
    }//GEN-LAST:event_redoStartTimeTFMouseClicked

    private void redoStartTimeTFCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_redoStartTimeTFCaretUpdate
        // TODO add your handling code here:
    }//GEN-LAST:event_redoStartTimeTFCaretUpdate

    private void redoEndTimeTFMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_redoEndTimeTFMouseClicked
        GregorianCalendar gregorianCalendar = new GregorianCalendar();
			if (!this.redoEndTimeTF.getText().equals("")) {
				gregorianCalendar.setTime(TimeUtils.toDate(this.redoEndTimeTF
						.getText()));
			} else {
				gregorianCalendar = null;
			}
			Calendar c = JDateChooser.showDialog(null, "请选择日期",
					gregorianCalendar, this.stepType);
			if (c != null) {
				this.redoEndTimeTF.setText(TimeUtils.toChar(c.getTime()));
			}
    }//GEN-LAST:event_redoEndTimeTFMouseClicked

    private void jBtnOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnOKActionPerformed
        // TODO add your handling code here:

		int isSuspend = 1;
		boolean isPassValidate = true;
		try {
			Taskflow tf = Xmlrpc.getInstance().queryTaskflow(this.taskflow.getTaskflowID());
			isSuspend = tf.getStatus();
		} catch (Exception e) {
			e.printStackTrace();
		}
				StringBuffer firstBuffer = new StringBuffer();
				/*if (this.sceneStartTimeTF.getText().equals("")) {
					firstBuffer.append("场景时间不能为空！\n");
					isPassValidate = false;
				}*/
				if (this.redoStartTimeTF.getText().equals("")) {
					firstBuffer.append("重做开始时间不能为空！\n");
					isPassValidate = false;
				}
				if (this.redoEndTimeTF.getText().equals("")) {
					firstBuffer.append("重做结束时间不能为空！\n");
					isPassValidate = false;
				}
				if (isPassValidate) {
					long statTime = (TimeUtils.toDate(this.statTime)).getTime();
					/*long sceneStartTime = (TimeUtils
							.toDate(this.sceneStartTimeTF.getText())).getTime();*/
					long redoStartTime = (TimeUtils.toDate(this.redoStartTimeTF
							.getText())).getTime();
					long redoEndTime = (TimeUtils.toDate(this.redoEndTimeTF
							.getText())).getTime();
					if (statTime < redoStartTime) {
						JOptionPane.showMessageDialog(this,"重做开始时间应该小于当前" + TaskflowDialog.statTimeTitle,
								TaskflowDialog.TIME_ERROR_TITLE_MESSAGE,
								JOptionPane.ERROR_MESSAGE);
						isPassValidate = false;
					} else if (statTime < redoEndTime) {
						JOptionPane.showMessageDialog(this,"重做结束时间应该小于当前" + TaskflowDialog.statTimeTitle,
								TaskflowDialog.TIME_ERROR_TITLE_MESSAGE,
								JOptionPane.ERROR_MESSAGE);
						isPassValidate = false;
					} else if (redoStartTime > redoEndTime) {
						JOptionPane.showMessageDialog(this,"重做开始时间应该小于等于重做结束时间",
								TaskflowDialog.TIME_ERROR_TITLE_MESSAGE,
								JOptionPane.ERROR_MESSAGE);
						isPassValidate = false;
					}
				} else {
					JOptionPane
							.showMessageDialog(this, firstBuffer.toString(),
									TaskflowDialog.TIME_ERROR_TITLE_MESSAGE,
									JOptionPane.ERROR_MESSAGE);
				}

				if (isPassValidate) {
					// 秒
					String statTimeTFValue = TimeUtils.toChar(TimeUtils
							.toDate(this.statTime));
					/*String sceneStartTimeTFValue = TimeUtils.toChar(TimeUtils
							.toDate(sceneStartTimeTF.getText()));*/
					String redoStartTimeTFValue = TimeUtils.toChar(TimeUtils
							.toDate(redoStartTimeTF.getText()));
					String redoEndTimeTFValue = TimeUtils.toChar(TimeUtils
							.toDate(redoEndTimeTF.getText()));
					String statTimeSecond = statTimeTFValue.substring(17, 19);
					/*String sceneStartTimeSecond = sceneStartTimeTFValue
							.substring(17, 19);*/
					String redoStartTimeSecond = redoStartTimeTFValue
							.substring(17, 19);
					String redoEndTimeSecond = redoEndTimeTFValue.substring(17,
							19);
					boolean isStatTimeSecondNot00 = false;
					boolean isSceneStartTimeSecondNot00 = false;
					boolean isRedoStartTimeSecondNot00 = false;
					boolean isRedoEndTimeSecondNot00 = false;
					if (!TaskflowDialog.TIME_00.equals(statTimeSecond)) {
						isStatTimeSecondNot00 = true;
					}
					/*if (!TaskflowDialog.TIME_00.equals(sceneStartTimeSecond)) {
						isSceneStartTimeSecondNot00 = true;
					}*/
					if (!TaskflowDialog.TIME_00.equals(redoStartTimeSecond)) {
						isRedoStartTimeSecondNot00 = true;
					}
					if (!TaskflowDialog.TIME_00.equals(redoEndTimeSecond)) {
						isRedoEndTimeSecondNot00 = true;
					}

					// 分
					String statTimeMinute = statTimeTFValue.substring(14, 16);
					/*String sceneStartTimeMinute = sceneStartTimeTFValue
							.substring(14, 16);*/
					String redoStartTimeMinute = redoStartTimeTFValue
							.substring(14, 16);
					String redoEndTimeMinute = redoEndTimeTFValue.substring(14,
							16);
					boolean isStatTimeMinuteNot00 = false;
					boolean isSceneStartTimeMinuteNot00 = false;
					boolean isRedoStartTimeMinuteNot00 = false;
					boolean isRedoEndTimeMinuteNot00 = false;
					if (!TaskflowDialog.TIME_00.equals(statTimeMinute)) {
						isStatTimeMinuteNot00 = true;
					}
					/*if (!TaskflowDialog.TIME_00.equals(sceneStartTimeMinute)) {
						isSceneStartTimeMinuteNot00 = true;
					}*/
					if (!TaskflowDialog.TIME_00.equals(redoStartTimeMinute)) {
						isRedoStartTimeMinuteNot00 = true;
					}
					if (!TaskflowDialog.TIME_00.equals(redoEndTimeMinute)) {
						isRedoEndTimeMinuteNot00 = true;
					}

					// 时
					String statTimeHour = statTimeTFValue.substring(11, 13);
				/*	String sceneStartTimeHour = sceneStartTimeTFValue
							.substring(11, 13);*/
					String redoStartTimeHour = redoStartTimeTFValue.substring(
							11, 13);
					String redoEndTimeHour = redoEndTimeTFValue.substring(11,
							13);
					boolean isStatTimeHourNot00 = false;
					boolean isSceneStartTimeHourNot00 = false;
					boolean isRedoStartTimeHourNot00 = false;
					boolean isRedoEndTimeHourNot00 = false;
					if (!TaskflowDialog.TIME_00.equals(statTimeHour)) {
						isStatTimeHourNot00 = true;
					}
					/*if (!TaskflowDialog.TIME_00.equals(sceneStartTimeHour)) {
						isSceneStartTimeHourNot00 = true;
					}*/
					if (!TaskflowDialog.TIME_00.equals(redoStartTimeHour)) {
						isRedoStartTimeHourNot00 = true;
					}
					if (!TaskflowDialog.TIME_00.equals(redoEndTimeHour)) {
						isRedoEndTimeHourNot00 = true;
					}

					// 日
					String statTimeDay = statTimeTFValue.substring(8, 10);
					/*String sceneStartTimeDay = sceneStartTimeTFValue.substring(
							8, 10);*/
					String redoStartTimeDay = redoStartTimeTFValue.substring(8,
							10);
					String redoEndTimeDay = redoEndTimeTFValue.substring(8, 10);
					// 月
					String statTimeMonth = statTimeTFValue.substring(5, 7);
					/*String sceneStartTimeMonth = sceneStartTimeTFValue
							.substring(5, 7);*/
					String redoStartTimeMonth = redoStartTimeTFValue.substring(
							5, 7);
					String redoEndTimeMonth = redoEndTimeTFValue
							.substring(5, 7);
					if (StepType.MINUTE.equals(this.stepType.getStepType())) {
						boolean isRight = true;
						StringBuffer buffer = new StringBuffer();
						if (isStatTimeSecondNot00) {
							buffer.append(TaskflowDialog.statTimeTitle + " : 秒字段应该为零!\n");
							isPassValidate = false;
							isRight = false;
						}
						if (isSceneStartTimeSecondNot00) {
							buffer.append("场景时间 : 秒字段应该为零!\n");
							isPassValidate = false;
							isRight = false;
						}
						if (isRedoStartTimeSecondNot00) {
							buffer.append("重做开始时间 : 秒字段应该为零!\n");
							isPassValidate = false;
							isRight = false;
						}
						if (isRedoEndTimeSecondNot00) {
							buffer.append("重做结束时间 : 秒字段应该为零!\n");
							isPassValidate = false;
							isRight = false;
						}
						if (!isRight) {
							JOptionPane.showMessageDialog(this, buffer
									.toString(), TaskflowDialog.TIME_ERROR_TITLE_MESSAGE,
									JOptionPane.ERROR_MESSAGE);
						}
					} else if (StepType.HOUR
							.equals(this.stepType.getStepType())) {
						boolean isRight = true;
						StringBuffer buffer = new StringBuffer();
						if (isStatTimeSecondNot00 || isStatTimeMinuteNot00) {
							buffer.append(TaskflowDialog.statTimeTitle + " : 分、秒字段应该为零!\n");
							isPassValidate = false;
							isRight = false;
						}
						if (isSceneStartTimeSecondNot00
								|| isSceneStartTimeMinuteNot00) {
							buffer.append("场景时间 : 分、秒字段应该为零!\n");
							isPassValidate = false;
							isRight = false;
						}
						if (isRedoStartTimeSecondNot00
								|| isRedoStartTimeMinuteNot00) {
							buffer.append("重做开始时间 ：分、秒字段应该为零!\n");
							isPassValidate = false;
							isRight = false;
						}
						if (isRedoEndTimeSecondNot00
								|| isRedoEndTimeMinuteNot00) {
							buffer.append("重做结束时间 ：分、秒字段应该为零!\n");
							isPassValidate = false;
							isRight = false;
						}
						if (!isRight) {
							JOptionPane.showMessageDialog(this, buffer
									.toString(), TaskflowDialog.TIME_ERROR_TITLE_MESSAGE,
									JOptionPane.ERROR_MESSAGE);
						}
					} else if (StepType.DAY.equals(this.stepType.getStepType())
							|| StepType.WEEK
									.equals(this.stepType.getStepType())) {
						boolean isRight = true;
						StringBuffer buffer = new StringBuffer();
						if (isStatTimeSecondNot00 || isStatTimeMinuteNot00
								|| isStatTimeHourNot00) {
							buffer.append(TaskflowDialog.statTimeTitle + " : 时、分、秒字段应该为零!\n");
							isPassValidate = false;
							isRight = false;
						}
						if (isSceneStartTimeSecondNot00
								|| isSceneStartTimeMinuteNot00
								|| isSceneStartTimeHourNot00) {
							buffer.append("场景时间 : 时、分、秒字段应该为零!\n");
							isPassValidate = false;
							isRight = false;
						}
						if (isRedoStartTimeSecondNot00
								|| isRedoStartTimeMinuteNot00
								|| isRedoStartTimeHourNot00) {
							buffer.append("重做开始时间 ：时、分、秒字段应该为零!\n");
							isPassValidate = false;
							isRight = false;
						}
						if (isRedoEndTimeSecondNot00
								|| isRedoEndTimeMinuteNot00
								|| isRedoEndTimeHourNot00) {
							buffer.append("重做结束时间 ：时、分、秒字段应该为零!\n");
							isPassValidate = false;
							isRight = false;
						}
						if (!isRight) {
							JOptionPane.showMessageDialog(this, buffer
									.toString(), TaskflowDialog.TIME_ERROR_TITLE_MESSAGE,
									JOptionPane.ERROR_MESSAGE);
						}
					} else if (StepType.HALF_MONTH.equals(this.stepType
							.getStepType())) {
						boolean isRight = true;
						StringBuffer buffer = new StringBuffer();
						if (!TaskflowDialog.TIME_01.equals(statTimeDay)
								&& !"16".equals(statTimeDay)) {
							buffer.append(TaskflowDialog.statTimeTitle + " : 半月只能为每月1号和16号!\n");
							isPassValidate = false;
							isRight = false;
						}
						/*if (!TaskflowDialog.TIME_01.equals(sceneStartTimeDay)
								&& !"16".equals(sceneStartTimeDay)) {
							buffer.append("场景时间 : 半月只能为每月1号和16号!\n");
							isPassValidate = false;
							isRight = false;
						}*/
						if (!TaskflowDialog.TIME_01.equals(redoStartTimeDay)
								&& !"16".equals(redoStartTimeDay)) {
							buffer.append("重做开始时间 : 半月只能为每月1号和16号!\n");
							isPassValidate = false;
							isRight = false;
						}
						if (!TaskflowDialog.TIME_01.equals(redoEndTimeDay)
								&& !"16".equals(redoEndTimeDay)) {
							buffer.append("重做结束时间 : 半月只能为每月1号和16号!\n");
							isPassValidate = false;
							isRight = false;
						}
						if (isStatTimeSecondNot00 || isStatTimeMinuteNot00
								|| isStatTimeHourNot00) {
							buffer.append(TaskflowDialog.statTimeTitle + " : 时、分、秒字段应该为零!\n");
							isPassValidate = false;
							isRight = false;
						}
						if (isSceneStartTimeSecondNot00
								|| isSceneStartTimeMinuteNot00
								|| isSceneStartTimeHourNot00) {
							buffer.append("场景时间 : 时、分、秒字段应该为零!\n");
							isPassValidate = false;
							isRight = false;
						}
						if (isRedoStartTimeSecondNot00
								|| isRedoStartTimeMinuteNot00
								|| isRedoStartTimeHourNot00) {
							buffer.append("重做开始时间 ：时、分、秒字段应该为零!\n");
							isPassValidate = false;
							isRight = false;
						}
						if (isRedoEndTimeSecondNot00
								|| isRedoEndTimeMinuteNot00
								|| isRedoEndTimeHourNot00) {
							buffer.append("重做结束时间 ：时、分、秒字段应该为零!\n");
							isPassValidate = false;
							isRight = false;
						}
						if (!isRight) {
							JOptionPane.showMessageDialog(this, buffer
									.toString(), TaskflowDialog.TIME_ERROR_TITLE_MESSAGE,
									JOptionPane.ERROR_MESSAGE);
						}
					} else if (StepType.MONTH.equals(this.stepType
							.getStepType())) {
						boolean isRight = true;
						StringBuffer buffer = new StringBuffer();
						if (!TaskflowDialog.TIME_01.equals(statTimeDay)) {
							buffer.append(TaskflowDialog.statTimeTitle + " : 月只能为1号！\n");
							isPassValidate = false;
							isRight = false;
						}
						/*if (!TaskflowDialog.TIME_01.equals(sceneStartTimeDay)) {
							buffer.append("场景时间 : 月只能为1号！\n");
							isPassValidate = false;
							isRight = false;
						}*/
						if (!TaskflowDialog.TIME_01.equals(redoStartTimeDay)) {
							buffer.append("重做开始时间 ：月只能为1号！\n");
							isPassValidate = false;
							isRight = false;
						}
						if (!TaskflowDialog.TIME_01.equals(redoEndTimeDay)) {
							buffer.append("重做结束时间 ：月只能为1号！\n");
							isPassValidate = false;
							isRight = false;
						}
						if (isStatTimeSecondNot00 || isStatTimeMinuteNot00
								|| isStatTimeHourNot00) {
							buffer.append(TaskflowDialog.statTimeTitle + " : 时、分、秒字段应该为零!\n");
							isPassValidate = false;
							isRight = false;
						}
						if (isSceneStartTimeSecondNot00
								|| isSceneStartTimeMinuteNot00
								|| isSceneStartTimeHourNot00) {
							buffer.append("场景时间 : 时、分、秒字段应该为零!\n");
							isPassValidate = false;
							isRight = false;
						}
						if (isRedoStartTimeSecondNot00
								|| isRedoStartTimeMinuteNot00
								|| isRedoStartTimeHourNot00) {
							buffer.append("重做开始时间 ：时、分、秒字段应该为零!\n");
							isPassValidate = false;
							isRight = false;
						}
						if (isRedoEndTimeSecondNot00
								|| isRedoEndTimeMinuteNot00
								|| isRedoEndTimeHourNot00) {
							buffer.append("重做结束时间 ：时、分、秒字段应该为零!\n");
							isPassValidate = false;
							isRight = false;
						}
						if (!isRight) {
							JOptionPane.showMessageDialog(this, buffer
									.toString(), TaskflowDialog.TIME_ERROR_TITLE_MESSAGE,
									JOptionPane.ERROR_MESSAGE);
						}
					} else if (StepType.SEASON.equals(this.stepType
							.getStepType())) {
						boolean isRight = true;
						StringBuffer buffer = new StringBuffer();
						if (!TaskflowDialog.TIME_01.equals(statTimeDay)
								|| (!TaskflowDialog.TIME_01.equals(statTimeMonth)
										&& !"04".equals(statTimeMonth)
										&& !"07".equals(statTimeMonth) && !"10"
										.equals(statTimeMonth))) {
							buffer.append(TaskflowDialog.statTimeTitle + " : 季只能为1月1号,4月1号,7月1号,10月1号!\n");
							isPassValidate = false;
							isRight = false;
						}
						/*if (!TaskflowDialog.TIME_01.equals(sceneStartTimeDay)
								|| (!TaskflowDialog.TIME_01.equals(sceneStartTimeMonth)
										&& !"04".equals(sceneStartTimeMonth)
										&& !"07".equals(sceneStartTimeMonth) && !"10"
										.equals(sceneStartTimeMonth))) {
							buffer.append("场景时间 : 季只能为1月1号,4月1号,7月1号,10月1号!\n");
							isPassValidate = false;
							isRight = false;
						}*/
						if (!TaskflowDialog.TIME_01.equals(redoStartTimeDay)
								|| (!TaskflowDialog.TIME_01.equals(redoStartTimeMonth)
										&& !"04".equals(redoStartTimeMonth)
										&& !"07".equals(redoStartTimeMonth) && !"10"
										.equals(redoStartTimeMonth))) {
							buffer
									.append("重做开始时间 ：季只能为1月1号,4月1号,7月1号,10月1号!\n");
							isPassValidate = false;
							isRight = false;
						}
						if (!TaskflowDialog.TIME_01.equals(redoEndTimeDay)
								|| (!TaskflowDialog.TIME_01.equals(redoEndTimeMonth)
										&& !"04".equals(redoEndTimeMonth)
										&& !"07".equals(redoEndTimeMonth) && !"10"
										.equals(redoEndTimeMonth))) {
							buffer
									.append("重做结束时间 ：季只能为1月1号,4月1号,7月1号,10月1号!\n");
							isPassValidate = false;
							isRight = false;
						}
						if (isStatTimeSecondNot00 || isStatTimeMinuteNot00
								|| isStatTimeHourNot00) {
							buffer.append(TaskflowDialog.statTimeTitle + " : 时、分、秒字段应该为零!\n");
							isPassValidate = false;
							isRight = false;
						}
						if (isSceneStartTimeSecondNot00
								|| isSceneStartTimeMinuteNot00
								|| isSceneStartTimeHourNot00) {
							buffer.append("场景时间 : 时、分、秒字段应该为零!\n");
							isPassValidate = false;
							isRight = false;
						}
						if (isRedoStartTimeSecondNot00
								|| isRedoStartTimeMinuteNot00
								|| isRedoStartTimeHourNot00) {
							buffer.append("重做开始时间 ：时、分、秒字段应该为零!\n");
							isPassValidate = false;
							isRight = false;
						}
						if (isRedoEndTimeSecondNot00
								|| isRedoEndTimeMinuteNot00
								|| isRedoEndTimeHourNot00) {
							buffer.append("重做结束时间 ：时、分、秒字段应该为零!\n");
							isPassValidate = false;
							isRight = false;
						}
						if (!isRight) {
							JOptionPane.showMessageDialog(this, buffer
									.toString(), TaskflowDialog.TIME_ERROR_TITLE_MESSAGE,
									JOptionPane.ERROR_MESSAGE);
						}
					} else if (StepType.HALF_YEAR.equals(this.stepType
							.getStepType())) {
						boolean isRight = true;
						StringBuffer buffer = new StringBuffer();
						if (!TaskflowDialog.TIME_01.equals(statTimeDay)
								|| (!TaskflowDialog.TIME_01.equals(statTimeMonth) && !"07"
										.equals(statTimeMonth))) {
							buffer.append(TaskflowDialog.statTimeTitle + " : 半年只能为1月1号、7月1号!\n");
							isPassValidate = false;
							isRight = false;
						}
						/*if (!TaskflowDialog.TIME_01.equals(sceneStartTimeDay)
								|| (!TaskflowDialog.TIME_01.equals(sceneStartTimeMonth) && !"07"
										.equals(sceneStartTimeMonth))) {
							buffer.append("场景时间 : 半年只能为1月1号、7月1号!\n");
							isPassValidate = false;
							isRight = false;
						}*/
						if (!TaskflowDialog.TIME_01.equals(redoStartTimeDay)
								|| (!TaskflowDialog.TIME_01.equals(redoStartTimeMonth) && !"07"
										.equals(redoStartTimeMonth))) {
							buffer.append("重做开始时间 ：半年只能为1月1号、7月1号!\n");
							isPassValidate = false;
							isRight = false;
						}
						if (!TaskflowDialog.TIME_01.equals(redoEndTimeDay)
								|| (!TaskflowDialog.TIME_01.equals(redoEndTimeMonth) && !"07"
										.equals(redoEndTimeMonth))) {
							buffer.append("重做结束时间 ：半年只能为1月1号、7月1号!\n");
							isPassValidate = false;
							isRight = false;
						}
						if (isStatTimeSecondNot00 || isStatTimeMinuteNot00
								|| isStatTimeHourNot00) {
							buffer.append(TaskflowDialog.statTimeTitle + " : 时、分、秒字段应该为零!\n");
							isPassValidate = false;
							isRight = false;
						}
						if (isSceneStartTimeSecondNot00
								|| isSceneStartTimeMinuteNot00
								|| isSceneStartTimeHourNot00) {
							buffer.append("场景时间 : 时、分、秒字段应该为零!\n");
							isPassValidate = false;
							isRight = false;
						}
						if (isRedoStartTimeSecondNot00
								|| isRedoStartTimeMinuteNot00
								|| isRedoStartTimeHourNot00) {
							buffer.append("重做开始时间 ：时、分、秒字段应该为零!\n");
							isPassValidate = false;
							isRight = false;
						}
						if (isRedoEndTimeSecondNot00
								|| isRedoEndTimeMinuteNot00
								|| isRedoEndTimeHourNot00) {
							buffer.append("重做结束时间 ：时、分、秒字段应该为零!\n");
							isPassValidate = false;
							isRight = false;
						}
						if (!isRight) {
							JOptionPane.showMessageDialog(this, buffer
									.toString(), TaskflowDialog.TIME_ERROR_TITLE_MESSAGE,
									JOptionPane.ERROR_MESSAGE);
						}
					} else if (StepType.YEAR
							.equals(this.stepType.getStepType())) {
						boolean isRight = true;
						StringBuffer buffer = new StringBuffer();
						if (!TaskflowDialog.TIME_01.equals(statTimeDay)
								|| !TaskflowDialog.TIME_01.equals(statTimeMonth)) {
							buffer.append(TaskflowDialog.statTimeTitle + " : 年只能为1月1号!\n");
							isPassValidate = false;
							isRight = false;
						}
						/*if (!TaskflowDialog.TIME_01.equals(sceneStartTimeDay)
								|| !TaskflowDialog.TIME_01.equals(sceneStartTimeMonth)) {
							buffer.append("场景时间 : 年只能为1月1号!\n");
							isPassValidate = false;
							isRight = false;
						}*/
						if (!TaskflowDialog.TIME_01.equals(redoStartTimeDay)
								|| !TaskflowDialog.TIME_01.equals(redoStartTimeMonth)) {
							buffer.append("重做开始时间 ：年只能为1月1号!\n");
							isPassValidate = false;
							isRight = false;
						}
						if (!TaskflowDialog.TIME_01.equals(redoEndTimeDay)
								|| !TaskflowDialog.TIME_01.equals(redoEndTimeMonth)) {
							buffer.append("重做结束时间 ：年只能为1月1号!\n");
							isPassValidate = false;
							isRight = false;
						}
						if (isStatTimeSecondNot00 || isStatTimeMinuteNot00
								|| isStatTimeHourNot00) {
							buffer.append(TaskflowDialog.statTimeTitle + " : 时、分、秒字段应该为零!\n");
							isPassValidate = false;
							isRight = false;
						}
						if (isSceneStartTimeSecondNot00
								|| isSceneStartTimeMinuteNot00
								|| isSceneStartTimeHourNot00) {
							buffer.append("场景时间 : 时、分、秒字段应该为零!\n");
							isPassValidate = false;
							isRight = false;
						}
						if (isRedoStartTimeSecondNot00
								|| isRedoStartTimeMinuteNot00
								|| isRedoStartTimeHourNot00) {
							buffer.append("重做开始时间 ：时、分、秒字段应该为零!\n");
							isPassValidate = false;
							isRight = false;
						}
						if (isRedoEndTimeSecondNot00
								|| isRedoEndTimeMinuteNot00
								|| isRedoEndTimeHourNot00) {
							buffer.append("重做结束时间 ：时、分、秒字段应该为零!\n");
							isPassValidate = false;
							isRight = false;
						}
						if (!isRight) {
							JOptionPane.showMessageDialog(this, buffer
									.toString(), TaskflowDialog.TIME_ERROR_TITLE_MESSAGE,
									JOptionPane.ERROR_MESSAGE);
						}
					}
				}
			
			if (isPassValidate) {
				// 最后保存
				try {
				//	System.out.println(result);
					// 场景时间

				/*	if (!this.sceneStartTimeTF.getText().equals(""))
						result = Xmlrpc.getInstance().updateSceneStatTime(taskflow.getTaskflowID(), TimeUtils.toDate(this.sceneStartTimeTF.getText()));
					else
						result = Xmlrpc.getInstance().updateSceneStatTime(taskflow.getTaskflowID(), null);

					log.debug(result);*/
					// 是否重做
//						FlowMetaData.getInstance().updateRedoFlagOfTaskflow(
//								this.taskflow.getTaskflowID(), 1);
						String result = Xmlrpc.getInstance().redo(taskflow.getTaskflow(), TimeUtils.toDate(redoStartTimeTF.getText()), TimeUtils.toDate(redoEndTimeTF.getText()));

						//System.err.println(result);

						JOptionPane.showMessageDialog(this, result,
								TaskflowDialog.TIME_ERROR_TITLE_MESSAGE, JOptionPane.ERROR_MESSAGE);

					
					this.setIsConfirm(true);
					this.setVisible(false);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
    }//GEN-LAST:event_jBtnOKActionPerformed

    private void jBtnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnCloseActionPerformed
        // TODO add your handling code here:
        this.setIsConfirm(false);
	this.setVisible(false);
    }//GEN-LAST:event_jBtnCloseActionPerformed

    private void jBtnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnCancelActionPerformed
        // TODO add your handling code here:
        //取消重做流程：
//    	FlowMetaData.getInstance().updateRedoFlagOfTaskflow(
//				this.taskflow.getTaskflowID(), 0);
		String result;
		try {
			JOptionPane.showMessageDialog(this, "暂时不支持取消重做操作",
					TaskflowDialog.TIME_ERROR_TITLE_MESSAGE, JOptionPane.INFORMATION_MESSAGE);
			return;
			/*result = Xmlrpc.getInstance().updateRedoStartTime(taskflow.getTaskflowID(), null);
			log.info(result);
			result = Xmlrpc.getInstance().updateRedoEndTime(taskflow.getTaskflowID(), null);
			log.info(result);
			result = Xmlrpc.getInstance().updateStatTime(taskflow.getTaskflowID(), TimeUtils.toDate(this.sceneStartTime));
			log.info(result);
			result = Xmlrpc.getInstance().updateRedoFlag(this.taskflow.getTaskflowID(), 0);
			log.info(result);*/
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			log.error("取消重做流程出错：",e);
		}
		
    }//GEN-LAST:event_jBtnCancelActionPerformed

   

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                TaskFlowRedoDialog dialog = new TaskFlowRedoDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtnCancel;
    private javax.swing.JButton jBtnClose;
    private javax.swing.JButton jBtnOK;
    private javax.swing.JLabel redoEndTimeL;
    private javax.swing.JTextField redoEndTimeTF;
    private javax.swing.JLabel redoStartTimeL;
    private javax.swing.JLabel redoStartTimeL1;
    private javax.swing.JLabel redoStartTimeL2;
    private javax.swing.JTextField redoStartTimeTF;
    private javax.swing.JTextField statTimeTF;
    private javax.swing.JTextField taskflowName;
    // End of variables declaration//GEN-END:variables

}
